---
- hosts: all
  become: True

  tasks:
    - name: Upgrade packages
      apt: only_upgrade=yes update_cache=yes cache_valid_time=3600

    - name: Install base packages
      apt: 
        name: "{{ item }}"
        state: present
        autoclean: yes
        autoremove: yes
        force_apt_get: yes
      vars:
        item: ['sudo', 'git', 'build-essential', 'vim', 'python3', 'openjdk-8-jdk']

    - name: Add Jenkins repository key
      apt_key:
        url: "https://pkg.jenkins.io/debian/jenkins.io.key"
        state: present

    - name: Clean apt lists
      file:
        path: "/var/lib/apt/lists/*"
        state: absent

    - name: Update apt following apt mergelists fix
      apt: update_cache=yes

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb http://pkg.jenkins.io/debian-stable binary/"
        state: present

    - name: Install Jenkins
      apt: name=jenkins update_cache=yes cache_valid_time=3600

    # Installing Dependencies.
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

#   Adding docker repo.

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

#   Intalling Docker.
    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add jenkins user to docker group
      user:
        name: jenkins
        group: docker
      notify:
        - restart jenkins
        - docker restart

# Adding k8s repository
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubectl



# Setting Kube config for user Jenkins.
    - name: Ansible check .kube directory if exist.
      stat:
        path: /var/lib/jenkins/.kube
      register: my_folder



    - name: Create Folder
      file:
       path: /var/lib/jenkins/.kube
       state: directory
       mode: 0755
       group: vagrant
       owner: vagrant
      when: my_folder.stat.exists == false
 

    - name: Copy kube config on the jenkins server.
      copy:
        src: ../files/config
        dest: /var/lib/jenkins/.kube/config
        owner: jenkins
        group: jenkins
        mode: u=rwx,g=r,o=r

# Downloding and installing Helm.
    - name: Downloading helm.
      get_url: 
        url: https://git.io/get_helm.sh
        dest: /tmp/get_helm.sh
        mode: 777
    
    - name: Installing Helm Kubernetes packages manager.
      become: yes
      command: bash /tmp/get_helm.sh

# Get Jenkins Url and password.
    - name: Copy Jenkins password Vagrant folder in jenkins_pass.txt.
      command: cp -fr /var/lib/jenkins/secrets/initialAdminPassword /vagrant/jenkins_pass.txt

    - name: Copy Jenkins URL to Vagrant folder in jenkins_url.txt.
      shell: 'ip a s | grep eth1 | grep inet | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" | grep -v "255"'
      register: url_command
  
    - name: Copy url command to local file
      become: false
      local_action: copy content="{{ url_command.stdout_lines[0] +":8080" }}" dest="../jenkins_url.txt"
      notify:

      - name: Reboot the server
        shell: "sleep 5 && reboot"
        async: 1
        poll: 0

      - name: Wait for the reboot to complete.
        wait_for_connection:
          connect_timeout: 10
          sleep: 50
          delay: 5
          timeout: 300

# Restarting Docker service.

  handlers:
    - name: docker status
      service: name=docker state=started

    - name: restart jenkins
      service: name=jenkins state=restarted

    - name: docker restart
      service: name=docker state=restarted